{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9c0c8101-2f71-47b1-83f7-6f5a138833ae",
   "metadata": {},
   "source": [
    "# Salesforce monitoring code for KPI: \n",
    "## LPE(new loan per ACE employee per work day, average among LPE per branch by day)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 921,
   "id": "14b38b29-a164-4125-8b0e-700bc78d5487",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "go_live_date is 2025-09-15 00:00:00\n",
      "earliest data capture date is 09/01/2025\n"
     ]
    }
   ],
   "source": [
    "import pyodbc\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.backends.backend_pdf import PdfPages\n",
    "\n",
    "# # --- Load and prepare data ---\n",
    "# file_path = 'Database_final_df_Apr-2025.csv'\n",
    "# df = pd.read_csv(file_path)\n",
    "# df_old=df.copy()\n",
    "go_live_date = pd.to_datetime(\"2025-09-15\")\n",
    "start_date='09/01/2025'\n",
    "print(\"go_live_date is\", go_live_date)\n",
    "print(\"earliest data capture date is\" , start_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 922,
   "id": "c57dd753-55db-44e4-b631-5ab8f0550017",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sguo.MARINERFINANCE\\AppData\\Local\\Temp\\ipykernel_15104\\3561228244.py:18: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df_3kpi = pd.read_sql(sql_query, conn)\n"
     ]
    }
   ],
   "source": [
    "# Setup your SQL Server connection\n",
    "conn = pyodbc.connect(\n",
    "    'Driver={SQL Server};'\n",
    "    'Server=HQBUSDEVDB01;'\n",
    "    'Database=RiskPredictiveAnalytics;'\n",
    "    'Trusted_Connection=yes;'\n",
    ")\n",
    "\n",
    "# The SQL query with embedded OPENQUERY (note double single quotes inside the string)\n",
    "sql_query = \"\"\"\n",
    "select * from SalesForce_AB_Testing;\n",
    "\n",
    "\n",
    "   \"\"\"\n",
    "\n",
    "\n",
    "# Load into a DataFrame\n",
    "df_3kpi = pd.read_sql(sql_query, conn)\n",
    "\n",
    "# Preview result\n",
    "# print(df_3kpi.head())\n",
    "\n",
    "# Close connection\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 923,
   "id": "00174789-a221-415e-ac0a-69fdd4efee1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save dataframe to CSV\n",
    "# df_3kpi.to_csv(\"df_3kpi_new_daily.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 924,
   "id": "9007f2c3-c384-400f-98bf-01c8101cfd00",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sguo.MARINERFINANCE\\AppData\\Local\\Temp\\ipykernel_15104\\1066157593.py:18: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  combined_df = pd.read_sql(sql_query, conn)\n"
     ]
    }
   ],
   "source": [
    "# Setup your SQL Server connection\n",
    "conn = pyodbc.connect(\n",
    "    'Driver={SQL Server};'\n",
    "    'Server=HQBUSDEVDB01;'\n",
    "    'Database=RiskPredictiveAnalytics;'\n",
    "    'Trusted_Connection=yes;'\n",
    ")\n",
    "\n",
    "# The SQL query with embedded OPENQUERY (note double single quotes inside the string)\n",
    "sql_query = \"\"\"\n",
    "select * from branch_district_division_mapping;\n",
    "\n",
    "\n",
    "   \"\"\"\n",
    "\n",
    "\n",
    "# Load into a DataFrame\n",
    "combined_df = pd.read_sql(sql_query, conn)\n",
    "\n",
    "# Preview result\n",
    "# print(df_3kpi.head())\n",
    "\n",
    "# Close connection\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 925,
   "id": "1ab0f074-fda5-4a0e-bd92-9e636ad2fc38",
   "metadata": {},
   "outputs": [],
   "source": [
    "# combined_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1091388a-fd46-4c50-9bc2-4dd2bdc667ed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 926,
   "id": "057cfa1e-df56-4447-bf2b-e18ad1dc1cfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# #### Pick an example branch and date\n",
    "# branch_id = 7418              # replace with branch you want\n",
    "# calendar_date = \"2025-09-15\"  # replace with your date\n",
    "\n",
    "# combined_df.loc[\n",
    "#     (combined_df[\"Branch\"] == branch_id) &\n",
    "#     (combined_df[\"AsOfDate\"] == calendar_date)\n",
    "# ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 927,
   "id": "6f6b26c2-9cff-4e5a-9163-578476c96efc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_3kpi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 928,
   "id": "c79a40c7-e2b4-4480-90df-b38dabd1d362",
   "metadata": {},
   "outputs": [],
   "source": [
    "# #### Pick an example branch and date\n",
    "# branch_id = 4012              # replace with branch you want\n",
    "# calendar_date = \"2025-09-01\"  # replace with your date\n",
    "\n",
    "# df_3kpi.loc[\n",
    "#     (df_3kpi[\"branch\"] == branch_id) &\n",
    "#     (df_3kpi[\"CalendarDate\"] == calendar_date)\n",
    "# ]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 929,
   "id": "117451d4-2d60-4a34-846b-514f491c15e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_3kpi.branch_district.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 930,
   "id": "d8ddcfd4-6850-4334-b59e-2df99c981629",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-12-01 to 2025-09-21\n"
     ]
    }
   ],
   "source": [
    "print(df_3kpi.CalendarDate.min(), \"to\", df_3kpi.CalendarDate.max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cecec7b6-ad8f-45db-b641-af3a161a5186",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 931,
   "id": "ec66e15e-66e4-43aa-be9f-8dc9db34f1ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                   Missing_Count  Missing_Rate(%)\n",
      "CalendarDate                                   0             0.00\n",
      "branch                                         0             0.00\n",
      "branch_state                                1775             0.33\n",
      "branch_district                            10035             1.85\n",
      "teller                                    184587            34.00\n",
      "new_apps                                       0             0.00\n",
      "new_loans                                      0             0.00\n",
      "new_loan_amt                                   0             0.00\n",
      "#emps                                      93999            17.32\n",
      "active_loans_count                         93924            17.30\n",
      "active_loans_original_balance              94954            17.49\n",
      "active_loans_current_balance               93924            17.30\n",
      "dq30_active_loans_count                    93924            17.30\n",
      "dq30_original_balance                      93924            17.30\n",
      "dq30_current_balance                       93924            17.30\n",
      "pot30_active_loans_count                   93924            17.30\n",
      "pot30_original_balance                     93936            17.30\n",
      "pot30_current_balance                      93924            17.30\n",
      "pot30_paid1x_loans_count_byDay             93924            17.30\n",
      "pot30_paid1x_loans_count_perMonth          93924            17.30\n"
     ]
    }
   ],
   "source": [
    "# Count missing values and calculate percentage\n",
    "missing = df_3kpi.isna().sum()\n",
    "missing_rate = (missing / len(df_3kpi)) * 100\n",
    "\n",
    "# Combine into one table\n",
    "missing_summary = pd.DataFrame({\n",
    "    \"Missing_Count\": missing,\n",
    "    \"Missing_Rate(%)\": missing_rate.round(2)\n",
    "})\n",
    "\n",
    "print(missing_summary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 932,
   "id": "525c124a-b9d0-4c0a-8f11-6f2e4f11d90e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# monthly.Group.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 933,
   "id": "a92c4a30-919a-4f5e-beed-1e9499a4b869",
   "metadata": {},
   "outputs": [],
   "source": [
    "# monthly.EOM.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 934,
   "id": "f128da58-16f8-4de4-8ed0-89508108ba6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_3kpi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 935,
   "id": "090c1711-bc5c-4b99-aa86-b1c40140aa65",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_3kpi.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 936,
   "id": "d613ec77-2d32-4715-833e-b977f508c7ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install holidays\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 937,
   "id": "ae518f44-b554-4ad1-ad9e-717b241baea0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[df['Branch']==7418]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 938,
   "id": "e607c142-fe02-4bac-8823-47dbdef43af7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 939,
   "id": "f2b0e13e-1abe-4ae6-9a23-2b9c1acbae98",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import ttest_ind\n",
    "df=df_3kpi.copy()\n",
    "\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Assume you already have two DataFrames: data and combed_df\n",
    "\n",
    "# Get set of allowed Branch IDs\n",
    "import pandas as pd\n",
    "\n",
    "# Ensure Branch column is numeric in combined_df\n",
    "combined_df[\"Branch\"] = pd.to_numeric(combined_df[\"Branch\"], errors=\"coerce\")\n",
    "\n",
    "# Drop rows where Branch could not be converted to a number\n",
    "combined_df = combined_df.dropna(subset=[\"Branch\"])\n",
    "\n",
    "# Build allowed branch set as integers\n",
    "allowed_branches = set(combined_df[\"Branch\"].astype(int))\n",
    "\n",
    "# allowed_branches\n",
    "# Filter rows in data where Branch is NOT in combed_df['Branch']\n",
    "df = df[df[\"branch\"].isin(allowed_branches)]\n",
    "\n",
    "# print(filtered_data.head())\n",
    "\n",
    "\n",
    "import holidays\n",
    "\n",
    "# Assume df has a 'CalendarDate' column\n",
    "df['CalendarDate'] = pd.to_datetime(df['CalendarDate'])\n",
    "df = df[df['CalendarDate'] >= pd.to_datetime(start_date)]\n",
    "\n",
    "# # 1. Remove Sat and Sundays\n",
    "# df = df[df['CalendarDate'].dt.weekday.isin([0,1,2,3,4])]  # Monday=0, Sunday=6\n",
    "\n",
    "# # 2. Remove U.S. federal holidays\n",
    "# us_holidays = holidays.US()\n",
    "# df = df[~df['CalendarDate'].isin(us_holidays)]\n",
    "\n",
    "# import holidays\n",
    "# import pandas as pd\n",
    "\n",
    "# --- 1. Weekday filter ---\n",
    "# Keep Mon–Fri always, and allow \"end-of-year Saturdays\" (Dec 16–31)\n",
    "mask_weekdays = df['CalendarDate'].dt.weekday.isin([0,1,2,3,4])  # Mon-Fri\n",
    "mask_endyear_sats = (\n",
    "    (df['CalendarDate'].dt.weekday == 5) &   # Saturday\n",
    "    (df['CalendarDate'].dt.month == 12) &    # December\n",
    "    (df['CalendarDate'].dt.day >= 16)        # After Dec 15\n",
    ")\n",
    "\n",
    "df = df[mask_weekdays | mask_endyear_sats]\n",
    "\n",
    "# --- 2. Remove U.S. federal holidays ---\n",
    "us_holidays = holidays.US()\n",
    "df = df[~df['CalendarDate'].isin(us_holidays)]\n",
    "\n",
    "\n",
    "# Reset index if needed\n",
    "df = df.reset_index(drop=True)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# df['EOM']=df['CalendarDate'] #daily view\n",
    "df['CalendarDate'] = pd.to_datetime(df['CalendarDate'], errors='coerce') #monthly view\n",
    "df['EOM'] = df['CalendarDate'] + pd.offsets.MonthEnd(0) #monthly view\n",
    "df['District']=df['branch_district']\n",
    "df['Branch']=df['branch']\n",
    "df['total_employee_size']=1\n",
    "df['active_dq30s']=df['dq30_active_loans_count']\n",
    "df['total_active_loans']=df['active_loans_count']\n",
    "# tot_active_loans\n",
    "\n",
    "# df['active_loans_current_balance']=df['upb']\n",
    "# df['active_loans_original_balance']=df['obal']\n",
    "\n",
    "# df['dq30_original_balance']=1\n",
    "# df['dq30_current_balance']=5\n",
    "# df['pot30_original_balance']=2\n",
    "# df['pot30_current_balance']=70\n",
    "# df['pot30_active_loans_count']=df['pot30']\n",
    "# df['pot30_paid1x_loans_count']=df['paid1x']\n",
    "\n",
    "\n",
    "\n",
    "#emps\tpot30\tdq30\tupb\tobal\tpaid1x\n",
    "# | Description                                                           | Suggested Column Name          |\n",
    "# | --------------------------------------------------------------------- | ------------------------------ |\n",
    "# | Current balance all active loans                                      | `active_loans_current_balance` |\n",
    "# | dq30\\$ - original balance for dq30                                    | `dq30_original_balance`        |\n",
    "# | dq30\\$ - current balance for dq30                                     | `dq30_current_balance`         |\n",
    "# | pot30\\$ - original balance for pot30                                  | `pot30_original_balance`       |\n",
    "# | pot30\\$ - current balance for pot30                                   | `pot30_current_balance`        |\n",
    "# | pot30# = No of all active loans pot30                                 | `pot30_active_loans_count`     |\n",
    "# | pot30paid1x# = No of all active loans pot30 with at least one payment | `pot30_paid1x_loans_count`     |\n",
    "\n",
    "\n",
    "df[\"dq30_pct_unit\"] = df[\"active_dq30s\"] / df[\"total_active_loans\"].replace(0,np.nan) #active loan \n",
    "df[\"dq30_pct_$\"] = df[\"dq30_current_balance\"] / df[\"active_loans_current_balance\"].replace(0,np.nan) #active loan \n",
    "df[\"dq29_pot30_payment_rate_unit\"] = df[\"pot30_paid1x_loans_count_perMonth\"] / df[\"pot30_active_loans_count\"].replace(0,np.nan)  #new loan \n",
    "df[\"dq29_pot30_payment_rate_$\"] = (df[\"pot30_original_balance\"]-df[\"pot30_current_balance\"]) / df[\"pot30_original_balance\"].replace(0,np.nan)  #new loan \n",
    "\n",
    "\n",
    "# 'CalendarDate', 'branch', 'branch_state', 'branch_district', 'teller',\n",
    "#        'new_apps', 'new_loans', 'new_loan_amt', '#emps', 'active_loans_count',\n",
    "#        'active_loans_original_balance', 'active_loans_current_balance',\n",
    "#        'dq30_active_loans_count', 'dq30_original_balance',\n",
    "#        'dq30_current_balance', 'pot30_active_loans_count',\n",
    "#        'pot30_original_balance', 'pot30_current_balance',\n",
    "#        'pot30_paid1x_loans_count_byDay', 'pot30_paid1x_loans_count_perMonth'],\n",
    "#       dtype='object')\n",
    "\n",
    "\n",
    "df['Branch'] = pd.to_numeric(df['Branch'], errors='coerce').astype('Int64')\n",
    "df['District'] = pd.to_numeric(df['District'], errors='coerce').astype('Int64')\n",
    "df['EOM'] = pd.to_datetime(df['EOM'], errors='coerce')\n",
    "\n",
    "# Drop rows where District is missing (NaN or None)\n",
    "df = df.dropna(subset=['District'])\n",
    "\n",
    "# Define your branch list\n",
    "\n",
    "# Filter the DataFrame\n",
    "# df = df[df[\"Branch\"].isin(branch_list)]\n",
    "\n",
    "# # Reset index (optional, to clean row numbers)\n",
    "# df = df.reset_index(drop=True)\n",
    "\n",
    "\n",
    "\n",
    "# ---------------------------\n",
    "# Setup\n",
    "# ---------------------------\n",
    "# test_districts = [365, 370, 600, 855, 881, 886, 931, 965]\n",
    "# control_districts = [350, 610, 851, 880, 888, 936, 962, 966]\n",
    "test_districts = [365]\n",
    "control_districts = [ 610]\n",
    "kpis = [\"LPE_per_day_newloan\",\"avg_loan_size_newloan\",\"dq30_pct_unit\",\"dq30_pct_$\",\"dq29_pot30_payment_rate_unit_per_day\",\"dq29_pot30_payment_rate_unit_up_to_day\",\"dq29_pot30_payment_rate_$\",\n",
    "        \"total_employee_size_per_day\"\n",
    "        # ,\n",
    "\n",
    "        # \"pot30_active_loans_count\",\"pot30_paid1x_loans_count\"\n",
    "# df['active_loans_current_balance']=df['upb']\n",
    "# df['active_loans_original_balance']=df['obal']\n",
    "\n",
    "# df['dq30_original_balance']=1\n",
    "# df['dq30_current_balance']=5\n",
    "# df['pot30_original_balance']=2\n",
    "# df['pot30_current_balance']=70\n",
    "# df['pot30_active_loans_count']=df['pot30']\n",
    "# df['pot30_paid1x_loans_count']=df['paid1x']\n",
    "        # \"LPE_per_month_newloan\",\n",
    "        # \"new_apps\",\"new_loans\",\"new_loan_amt\",\"active_dq30s\"\n",
    "       ]\n",
    "# new_apps\tnew_loans\tnew_loan_amt\tdaysOff\tactive_dq30s\ttot_active_loans\n",
    "\n",
    "\n",
    "# temp = df.copy()\n",
    "df['Group'] = 'Rest'\n",
    "df.loc[df['District'].isin(control_districts), 'Group'] = 'Control'\n",
    "# temp['Group'] = 'Control'\n",
    "# temp.loc[temp['District'].isin(control_districts), 'Group'] = 'Rest'\n",
    "df.loc[df['District'].isin(test_districts), 'Group'] = 'Test'\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Example: your rollout date\n",
    "# go_live_date = pd.to_datetime(\"2025-09-01\")\n",
    "\n",
    "# Convert CalendarDate to datetime\n",
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "# # Set your rollout date\n",
    "# go_live_date = pd.to_datetime(\"2025-09-01\")\n",
    "\n",
    "# # Make sure CalendarDate is datetime\n",
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "# Keep Golive as the actual cutoff date\n",
    "df[\"Golive\"] = go_live_date\n",
    "\n",
    "\n",
    "# Create flag columns\n",
    "# df[\"Golive\"] = df[\"CalendarDate\"].apply(lambda x: \"Pre\" if x < go_live_date else \"Post\")\n",
    "# df[\"Post\"] = (df[\"CalendarDate\"] >= go_live_date).astype(int)\n",
    "# Pre/Post label (string, useful for reporting)\n",
    "df[\"PrePost\"] = df[\"CalendarDate\"].apply(lambda x: \"Pre\" if x < go_live_date else \"Post\")\n",
    "\n",
    "# Numeric Post flag (needed for regression models)\n",
    "df[\"Post\"] = (df[\"CalendarDate\"] >= go_live_date).astype(int)\n",
    "\n",
    "# Quick check\n",
    "# print(df[[\"CalendarDate\", \"PrePost\", \"Post\"]].head(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 940,
   "id": "27301131-5ece-4b7f-98d2-d82df9c89bb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_districts is [365]  Branch is in [7402, 7427, 7430, 7434, 7443]\n",
      "control_districts is  [610]  Branch is in [4005, 4006, 4012, 4015, 7856, 7866]\n"
     ]
    }
   ],
   "source": [
    "combined_df[\"District\"] = pd.to_numeric(combined_df[\"District\"], errors=\"coerce\")\n",
    "\n",
    "print(\"test_districts is\", test_districts, \" Branch is in\", combined_df.loc[combined_df[\"District\"].isin(test_districts)]['Branch'].sort_values().to_list() )\n",
    "print(\"control_districts is \", control_districts , \" Branch is in\", combined_df.loc[combined_df[\"District\"].isin(control_districts)]['Branch'].sort_values().to_list())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 941,
   "id": "577b09e6-44c2-46d7-90cd-fad2b04dfc23",
   "metadata": {},
   "outputs": [],
   "source": [
    "# filtered = \n",
    "# filtered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 942,
   "id": "05539664-598d-4a6e-b7e4-2b10846866d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# # df.head()\n",
    "# # Pick an example branch and date\n",
    "# branch_id = 4012              # replace with branch you want\n",
    "# calendar_date = \"2025-09-01\"  # replace with your date\n",
    "\n",
    "# print(df.loc[\n",
    "#     (df[\"branch\"] == branch_id) \n",
    "# &\n",
    "#     (df[\"CalendarDate\"] == calendar_date)\n",
    "# ].sort_values(by=[\"CalendarDate\", \"branch\"]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 943,
   "id": "12de7a40-d61c-4e06-918c-8e9e573932a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 944,
   "id": "6d36bb48-5ec5-42db-a8d7-fff5ff0548d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Pre-period LPE ---\n",
    "pre_loans = (\n",
    "    df[df[\"Post\"] == 0]\n",
    "      .groupby([\"Branch\", \"Group\"])[\"new_loans\"]\n",
    "      .sum()\n",
    "      .reset_index(name=\"Pre_new_loans\")\n",
    ")\n",
    "\n",
    "pre_workingdays = (\n",
    "    df[df[\"Post\"] == 0]\n",
    "      .groupby([\"Branch\", \"Group\"])[\"CalendarDate\"]\n",
    "      .nunique()  # number of unique days in Pre period\n",
    "      .reset_index(name=\"Pre_workingdays\")\n",
    ")\n",
    "\n",
    "# print(pre_workingdays.head())\n",
    "\n",
    "pre_ACE_emps = (\n",
    "    df[df[\"Post\"] == 0]\n",
    "      .groupby([\"Branch\", \"Group\"])[\"#emps\"]\n",
    "      .mean()  # average employees per branch across Pre days\n",
    "      .reset_index(name=\"Pre_emps\")\n",
    ")\n",
    "\n",
    "# Merge loans + employees\n",
    "pre_district = (\n",
    "    pre_loans\n",
    "    .merge(pre_ACE_emps, on=[\"Branch\", \"Group\"])\n",
    "    .merge(pre_workingdays, on=[\"Branch\", \"Group\"])\n",
    ")\n",
    "\n",
    "# print(pre_district.head())\n",
    "pre_district[\"Pre_LPE\"] = pre_district[\"Pre_new_loans\"] / (pre_district[\"Pre_emps\"]*pre_district[\"Pre_workingdays\"])\n",
    "\n",
    "# pre_district.head(20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 945,
   "id": "9a2f781b-1a16-4a08-8eab-afedff900a76",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pre_district.Pre_workingdays.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 946,
   "id": "32857942-ec85-47aa-9066-8b502d7d26a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pre_district[pre_district['Branch']==4012]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 947,
   "id": "ab1f9678-931a-4adb-8505-c72eee43cd36",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df_3kpi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 948,
   "id": "ff557b26-535d-4454-9864-ae99182ec566",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # df.head()\n",
    "# # Pick an example branch and date\n",
    "# branch_id = 4012              # replace with branch you want\n",
    "# calendar_date = \"2025-09-01\"  # replace with your date\n",
    "\n",
    "# df_3kpi.loc[\n",
    "#     (df_3kpi[\"branch\"] == branch_id) \n",
    "# &\n",
    "#     (df_3kpi[\"CalendarDate\"] >= calendar_date)\n",
    "# ].sort_values(by=[\"CalendarDate\", \"branch\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 949,
   "id": "90ba2749-5344-4d06-8a16-57b7b1127538",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # df.head()\n",
    "# # Pick an example branch and date\n",
    "# branch_id = 7431              # replace with branch you want\n",
    "# calendar_date = \"2025-09-01\"  # replace with your date\n",
    "\n",
    "# df.loc[\n",
    "#     (df[\"branch\"] == branch_id) \n",
    "# &\n",
    "#     (df[\"CalendarDate\"] >= calendar_date)\n",
    "# ].sort_values(by=[\"CalendarDate\", \"Branch\", \"Group\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 950,
   "id": "ed93e78a-4117-44e6-b989-1310bc38f553",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Cluster Randomized Test (branch-level) ===\n",
      "Mean Change (Test districts):    0.470\n",
      "Mean Change (Control districts): 0.144\n",
      "Estimated Difference: 0.326\n",
      "t = 1.343, p = 0.2189\n",
      "On average, Test districts improved 0.470 LPE; Control districts improved 0.144 LPE. Difference = 0.326 LPE (Salesforce effect). But p = 0.2189, which is not statistically significant.\n",
      "\n",
      "Branch-level pre/post change:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Branch</th>\n",
       "      <th>Group</th>\n",
       "      <th>Pre_new_loans</th>\n",
       "      <th>Pre_emps</th>\n",
       "      <th>Pre_workingdays</th>\n",
       "      <th>Pre_LPE</th>\n",
       "      <th>Post_new_loans</th>\n",
       "      <th>Post_emps</th>\n",
       "      <th>Post_workingdays</th>\n",
       "      <th>Post_LPE</th>\n",
       "      <th>Change</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>4005</td>\n",
       "      <td>Control</td>\n",
       "      <td>16</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>4006</td>\n",
       "      <td>Control</td>\n",
       "      <td>20</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>21</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>4012</td>\n",
       "      <td>Control</td>\n",
       "      <td>20</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.3</td>\n",
       "      <td>-0.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>203</th>\n",
       "      <td>4015</td>\n",
       "      <td>Control</td>\n",
       "      <td>10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>7856</td>\n",
       "      <td>Control</td>\n",
       "      <td>14</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>12</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>443</th>\n",
       "      <td>7866</td>\n",
       "      <td>Control</td>\n",
       "      <td>27</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>12</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>-0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>7402</td>\n",
       "      <td>Test</td>\n",
       "      <td>6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>6</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>355</th>\n",
       "      <td>7427</td>\n",
       "      <td>Test</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>10</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>357</th>\n",
       "      <td>7430</td>\n",
       "      <td>Test</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>7434</td>\n",
       "      <td>Test</td>\n",
       "      <td>13</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.650000</td>\n",
       "      <td>12</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.550000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>364</th>\n",
       "      <td>7443</td>\n",
       "      <td>Test</td>\n",
       "      <td>11</td>\n",
       "      <td>2.0</td>\n",
       "      <td>10</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>14</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.850000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Branch    Group  Pre_new_loans  Pre_emps  Pre_workingdays   Pre_LPE  \\\n",
       "193    4005  Control             16       2.0               10  0.800000   \n",
       "194    4006  Control             20       3.0               10  0.666667   \n",
       "200    4012  Control             20       2.0               10  1.000000   \n",
       "203    4015  Control             10       2.0               10  0.500000   \n",
       "439    7856  Control             14       3.0               10  0.466667   \n",
       "443    7866  Control             27       3.0               10  0.900000   \n",
       "343    7402     Test              6       2.0               10  0.300000   \n",
       "355    7427     Test             11       2.0               10  0.550000   \n",
       "357    7430     Test             12       2.0               10  0.600000   \n",
       "359    7434     Test             13       2.0               10  0.650000   \n",
       "364    7443     Test             11       2.0               10  0.550000   \n",
       "\n",
       "     Post_new_loans  Post_emps  Post_workingdays  Post_LPE    Change  \n",
       "193               8        2.0                 5       0.8  0.000000  \n",
       "194              21        3.0                 5       1.4  0.733333  \n",
       "200               3        2.0                 5       0.3 -0.700000  \n",
       "203              11        2.0                 5       1.1  0.600000  \n",
       "439              12        3.0                 5       0.8  0.333333  \n",
       "443              12        3.0                 5       0.8 -0.100000  \n",
       "343               6        2.0                 5       0.6  0.300000  \n",
       "355              10        2.0                 5       1.0  0.450000  \n",
       "357               8        2.0                 5       0.8  0.200000  \n",
       "359              12        2.0                 5       1.2  0.550000  \n",
       "364              14        2.0                 5       1.4  0.850000  "
      ]
     },
     "execution_count": 950,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from scipy import stats\n",
    "\n",
    "# --- 1. Prep data ---\n",
    "# df = df.copy()\n",
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "# df[\"Golive\"] = pd.to_datetime(df[\"Golive\"])\n",
    "\n",
    "# Compute LPE = new_loans per employee\n",
    "# emp_col = \"total_employee_size\" if \"total_employee_size\" in df.columns else \"#emps\"\n",
    "# df[\"_emp_den\"] = pd.to_numeric(df[emp_col], errors=\"coerce\").clip(lower=1)\n",
    "# df[\"LPE\"] = df[\"new_loans\"] / df[\"_emp_den\"]\n",
    "\n",
    "# # # Compute LPE = new_loans per employee\n",
    "# # emp_col = \"total_employee_size\" if \"total_employee_size\" in df.columns else \"#emps\"\n",
    "# # df[\"_emp_den\"] = pd.to_numeric(df[\"#emps\"], errors=\"coerce\").clip(lower=1)\n",
    "# # df[\"LPE\"] = df[\"new_loans\"] / df[\"_emp_den\"]\n",
    "\n",
    "# # Flag Pre/Post per row based on branch's Golive date\n",
    "# # df[\"Post\"] = (df[\"CalendarDate\"] >= df[\"Golive\"]).astype(int)\n",
    "\n",
    "\n",
    "# # --- 2. Aggregate Pre and Post averages at district level ---\n",
    "# pre_district = (df[df[\"Post\"] == 0]\n",
    "#                 .groupby([\"Branch\", \"Group\"])[\"new_loans\"]\n",
    "#                 .sum()\n",
    "#                 .reset_index(name=\"Pre_LPE\"))\n",
    "# pre_district = (df[df[\"Post\"] == 0]\n",
    "#                 .groupby([\"Branch\", \"Group\"])[\"#emps\"]\n",
    "#                 .mean()\n",
    "#                 .reset_index(name=\"Pre_LPE\"))\n",
    "# pre_district = pre_district[\"new_loans\"]/pre_district[\"#emps\"]\n",
    "             \n",
    "\n",
    "# # --- 2. Aggregate Pre and Post averages at district level ---\n",
    "# pre_district = (df[df[\"Post\"] == 0]\n",
    "#                 .groupby([\"Branch\", \"Group\"])[\"LPE\"]\n",
    "#                 .mean()\n",
    "#                 .reset_index(name=\"Pre_LPE\"))\n",
    "\n",
    "# post_district = (df[df[\"Post\"] == 1]\n",
    "#                  .groupby([\"Branch\", \"Group\"])[\"LPE\"]\n",
    "#                  .mean()\n",
    "#                  .reset_index(name=\"Post_LPE\"))\n",
    "def compute_period_LPE(df, post_flag: int, prefix: str):\n",
    "    \"\"\"\n",
    "    Compute period-level LPE for each branch:\n",
    "    LPE = total new_loans / (avg employees × working days)\n",
    "\n",
    "    Args:\n",
    "        df : DataFrame with columns [\"Branch\",\"Group\",\"new_loans\",\"#emps\",\"CalendarDate\",\"Post\"]\n",
    "        post_flag : 0 for Pre-period, 1 for Post-period\n",
    "        prefix : string prefix for output column names (\"Pre\" or \"Post\")\n",
    "\n",
    "    Returns:\n",
    "        DataFrame with [Branch, Group, <prefix>_new_loans, <prefix>_emps,\n",
    "                        <prefix>_workingdays, <prefix>_LPE]\n",
    "    \"\"\"\n",
    "    # Filter\n",
    "    dff = df[df[\"Post\"] == post_flag]\n",
    "\n",
    "    # Total new loans\n",
    "    loans = (\n",
    "        dff.groupby([\"Branch\", \"Group\"])[\"new_loans\"]\n",
    "           .sum()\n",
    "           .reset_index(name=f\"{prefix}_new_loans\")\n",
    "    )\n",
    "\n",
    "    # Avg employees\n",
    "    emps = (\n",
    "        dff.groupby([\"Branch\", \"Group\"])[\"#emps\"]\n",
    "           .mean()\n",
    "           .reset_index(name=f\"{prefix}_emps\")\n",
    "    )\n",
    "\n",
    "    # Number of working days\n",
    "    workingdays = (\n",
    "        dff.groupby([\"Branch\", \"Group\"])[\"CalendarDate\"]\n",
    "           .nunique()\n",
    "           .reset_index(name=f\"{prefix}_workingdays\")\n",
    "    )\n",
    "\n",
    "    # Merge all\n",
    "    out = loans.merge(emps, on=[\"Branch\",\"Group\"]).merge(workingdays, on=[\"Branch\",\"Group\"])\n",
    "\n",
    "    # Compute LPE\n",
    "    out[f\"{prefix}_LPE\"] = out[f\"{prefix}_new_loans\"] / (out[f\"{prefix}_emps\"] * out[f\"{prefix}_workingdays\"])\n",
    "\n",
    "    return out\n",
    "\n",
    "\n",
    "pre_district = compute_period_LPE(df, post_flag=0, prefix=\"Pre\")\n",
    "post_district = compute_period_LPE(df, post_flag=1, prefix=\"Post\")\n",
    "\n",
    "# print(pre_district.head())\n",
    "# print(post_district.head())\n",
    "\n",
    "district_change = pd.merge(pre_district, post_district,\n",
    "                           on=[\"Branch\", \"Group\"], how=\"inner\")\n",
    "district_change[\"Change\"] = district_change[\"Post_LPE\"] - district_change[\"Pre_LPE\"]\n",
    "\n",
    "\n",
    "# --- 3. Cluster Randomized t-test ---\n",
    "test_vals = district_change.loc[district_change[\"Group\"] == \"Test\", \"Change\"]\n",
    "ctrl_vals = district_change.loc[district_change[\"Group\"] == \"Control\", \"Change\"]\n",
    "\n",
    "res = stats.ttest_ind(test_vals, ctrl_vals, equal_var=False)\n",
    "\n",
    "print(\"\\n=== Cluster Randomized Test (branch-level) ===\")\n",
    "# Compute means and difference\n",
    "mean_test = test_vals.mean()\n",
    "mean_ctrl = ctrl_vals.mean()\n",
    "diff = mean_test - mean_ctrl\n",
    "\n",
    "# Print results\n",
    "print(f\"Mean Change (Test districts):    {mean_test:.3f}\")\n",
    "print(f\"Mean Change (Control districts): {mean_ctrl:.3f}\")\n",
    "print(f\"Estimated Difference: {diff:.3f}\")\n",
    "print(f\"t = {res.statistic:.3f}, p = {res.pvalue:.4f}\")\n",
    "print(\n",
    "    f\"On average, Test districts improved {mean_test:.3f} LPE; \"\n",
    "    f\"Control districts improved {mean_ctrl:.3f} LPE. \"\n",
    "    f\"Difference = {diff:.3f} LPE (Salesforce effect). \"\n",
    "    f\"But p = {res.pvalue:.4f}, which is \"\n",
    "    f\"{'statistically significant' if res.pvalue < 0.05 else 'not statistically significant'}.\"\n",
    ")\n",
    "\n",
    "\n",
    "print(\"\\nBranch-level pre/post change:\")\n",
    "\n",
    "district_change.loc[district_change[\"Group\"] != \"Rest\"].sort_values(by=[\"Group\",\"Branch\"]).head(20)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 951,
   "id": "dfd6b6cb-708a-4bec-936a-21018024bb8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 952,
   "id": "6b9fb42e-938a-4479-992a-155f4366fdb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_period_LPE(df, post_flag: int, prefix: str):\n",
    "    \"\"\"\n",
    "    Compute period-level LPE for each branch:\n",
    "    LPE = total new_loans / (avg employees × working days)\n",
    "\n",
    "    Args:\n",
    "        df : DataFrame with columns [\"Branch\",\"Group\",\"new_loans\",\"#emps\",\"CalendarDate\",\"Post\"]\n",
    "        post_flag : 0 for Pre-period, 1 for Post-period\n",
    "        prefix : string prefix for output column names (\"Pre\" or \"Post\")\n",
    "\n",
    "    Returns:\n",
    "        DataFrame with [Branch, Group, <prefix>_new_loans, <prefix>_emps,\n",
    "                        <prefix>_workingdays, <prefix>_LPE]\n",
    "    \"\"\"\n",
    "    # Filter\n",
    "    dff = df.copy()\n",
    "\n",
    "    # Total new loans\n",
    "    loans = (\n",
    "        dff.groupby([\"branch_district\",\"Branch\", \"CalendarDate\"])[\"new_loans\"]\n",
    "           .sum()\n",
    "           .reset_index(name=f\"{prefix}_new_loans\")\n",
    "    )\n",
    "\n",
    "    # Avg employees\n",
    "    emps = (\n",
    "        dff.groupby([\"branch_district\",\"Branch\", \"CalendarDate\"])[\"#emps\"]\n",
    "           .mean()\n",
    "           .reset_index(name=f\"{prefix}_emps\")\n",
    "    )\n",
    "\n",
    "    # Number of working days\n",
    "    workingdays = (\n",
    "        dff.groupby([\"branch_district\",\"Branch\", \"CalendarDate\"])[\"CalendarDate\"]\n",
    "           .nunique()\n",
    "           .reset_index(name=f\"{prefix}_workingdays\")\n",
    "    )\n",
    "\n",
    "    # Merge all\n",
    "    out = loans.merge(emps, on=[\"branch_district\",\"Branch\",\"CalendarDate\"]).merge(workingdays, on=[\"branch_district\",\"Branch\",\"CalendarDate\"])\n",
    "\n",
    "    # Compute LPE\n",
    "    out[f\"{prefix}_LPE\"] = out[f\"{prefix}_new_loans\"] / (out[f\"{prefix}_emps\"] * out[f\"{prefix}_workingdays\"])\n",
    "\n",
    "    return out\n",
    "\n",
    "\n",
    "df_branch_day = compute_period_LPE(df, post_flag=0, prefix=\"branch_day\")\n",
    "\n",
    "df_branch_day['District']=df_branch_day['branch_district']\n",
    "\n",
    "\n",
    "# --- 1. Prep data ---\n",
    "df = df_branch_day.copy()\n",
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "# Ensure LPE is computed\n",
    "# emp_col = \"total_employee_size\" if \"total_employee_size\" in df.columns else \"#emps\"\n",
    "# df[\"_emp_den\"] = pd.to_numeric(df[emp_col], errors=\"coerce\").clip(lower=1)\n",
    "df[\"LPE\"] = df[\"branch_day_LPE\"] \n",
    "\n",
    "# temp = df.copy()\n",
    "df['Group'] = 'Rest'\n",
    "df.loc[df['branch_district'].isin(control_districts), 'Group'] = 'Control'\n",
    "# temp['Group'] = 'Control'\n",
    "# temp.loc[temp['District'].isin(control_districts), 'Group'] = 'Rest'\n",
    "df.loc[df['branch_district'].isin(test_districts), 'Group'] = 'Test'\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Example: your rollout date\n",
    "# go_live_date = pd.to_datetime(\"2025-09-01\")\n",
    "\n",
    "# Convert CalendarDate to datetime\n",
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "# # Set your rollout date\n",
    "# go_live_date = pd.to_datetime(\"2025-09-01\")\n",
    "\n",
    "# # Make sure CalendarDate is datetime\n",
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "# Keep Golive as the actual cutoff date\n",
    "df[\"Golive\"] = go_live_date\n",
    "\n",
    "\n",
    "# Create flag columns\n",
    "# df[\"Golive\"] = df[\"CalendarDate\"].apply(lambda x: \"Pre\" if x < go_live_date else \"Post\")\n",
    "# df[\"Post\"] = (df[\"CalendarDate\"] >= go_live_date).astype(int)\n",
    "# Pre/Post label (string, useful for reporting)\n",
    "df[\"PrePost\"] = df[\"CalendarDate\"].apply(lambda x: \"Pre\" if x < go_live_date else \"Post\")\n",
    "\n",
    "# Numeric Post flag (needed for regression models)\n",
    "df[\"Post\"] = (df[\"CalendarDate\"] >= go_live_date).astype(int)\n",
    "\n",
    "# # Ensure Post flag exists (based on Golive per branch/district)\n",
    "# df[\"Golive\"] = pd.to_datetime(df[\"Golive\"])\n",
    "# df[\"Post\"] = (df[\"CalendarDate\"] >= df[\"Golive\"]).astype(int)\n",
    "# Map Group labels to numeric codes\n",
    "df[\"Group_num\"] = df[\"Group\"].map({\"Control\": 0, \"Test\": 1})\n",
    "\n",
    "# Drop \"Rest\" (not part of the experiment)\n",
    "df = df.dropna(subset=[\"Group_num\"])\n",
    "\n",
    "# Make sure it's integer\n",
    "df[\"Group_num\"] = df[\"Group_num\"].astype(int)\n",
    "df.to_csv('df_branch_day.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 953,
   "id": "5c13bbfc-0c70-48b0-b361-3f8111fc9cc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 954,
   "id": "725fb240-5e61-485b-902a-2ff955573cd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Ensure CalendarDate is datetime\n",
    "df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "metric = \"branch_day_LPE\"\n",
    "\n",
    "plt.figure(figsize=(14,6))\n",
    "\n",
    "dates = sorted(df[\"CalendarDate\"].unique())\n",
    "groups = df[\"Group\"].unique()\n",
    "\n",
    "# Assign colors for groups\n",
    "colors = {grp: col for grp, col in zip(groups, [\"skyblue\", \"lightcoral\", \"lightgreen\", \"orange\"])}\n",
    "\n",
    "for grp in groups:\n",
    "    # Collect data for this group, aligned by each date\n",
    "    data_for_group = [\n",
    "        df.loc[\n",
    "            (df[\"CalendarDate\"] == d) & (df[\"Group\"] == grp), metric\n",
    "        ].dropna().values\n",
    "        for d in dates\n",
    "    ]\n",
    "\n",
    "    # Overlay boxes (same positions for all groups)\n",
    "    plt.boxplot(\n",
    "        data_for_group,\n",
    "        positions=range(len(dates)),\n",
    "        widths=0.35,\n",
    "        patch_artist=True,\n",
    "        boxprops=dict(facecolor=colors[grp], alpha=0.5),\n",
    "        medianprops=dict(color=\"black\"),\n",
    "    )\n",
    "\n",
    "    # Overlay mean line\n",
    "    mean_values = [vals.mean() if len(vals) > 0 else None for vals in data_for_group]\n",
    "    plt.plot(range(len(dates)), mean_values, color=colors[grp], marker=\"o\", label=f\"{grp} Mean\")\n",
    "\n",
    "# Format x-axis with date labels\n",
    "plt.xticks(range(len(dates)), [d.strftime(\"%Y-%m-%d\") for d in dates], rotation=45, ha=\"right\")\n",
    "\n",
    "plt.title(f\"Daily Distribution of {metric} by Group (Overlaid with Average Among Branches Line)\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(metric.replace(\"_\", \" \").title())\n",
    "plt.legend(title=\"Group\")\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d513bfce-3f76-45a6-9b22-dc8c4ebad8b7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 955,
   "id": "3c06df56-181b-42e1-b835-d37b42af4623",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Branch×Day Difference-in-Differences ===\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                    LPE   R-squared:                       0.074\n",
      "Model:                            OLS   Adj. R-squared:                  0.057\n",
      "Method:                 Least Squares   F-statistic:                 2.190e+31\n",
      "Date:                Mon, 22 Sep 2025   Prob (F-statistic):           1.51e-16\n",
      "Time:                        18:01:07   Log-Likelihood:                -143.05\n",
      "No. Observations:                 165   AIC:                             294.1\n",
      "Df Residuals:                     161   BIC:                             306.5\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:              cluster                                         \n",
      "==================================================================================\n",
      "                     coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept          0.7222   5.81e-17   1.24e+16      0.000       0.722       0.722\n",
      "Group_num         -0.1922   4.73e-16  -4.07e+14      0.000      -0.192      -0.192\n",
      "Post               0.1444   5.28e-18   2.73e+16      0.000       0.144       0.144\n",
      "Group_num:Post     0.3256   6.34e-16   5.14e+14      0.000       0.326       0.326\n",
      "==============================================================================\n",
      "Omnibus:                       10.459   Durbin-Watson:                   2.024\n",
      "Prob(Omnibus):                  0.005   Jarque-Bera (JB):               10.759\n",
      "Skew:                           0.616   Prob(JB):                      0.00461\n",
      "Kurtosis:                       3.212   Cond. No.                         6.10\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors are robust to cluster correlation (cluster)\n",
      "\n",
      "Estimated Salesforce Effect (Group_num×Post): 0.3256\n",
      "p-value: 0.0\n",
      "------Takeaways:\n",
      "After controlling for baseline differences and overall post-go-live trends, Salesforce rollout increased loans per employee (LPE) by ~0.326 per branch-day in the Test group relative to Control.\n",
      "Salesforce branches are averaging ~0.326 more loans per employee per day after rollout compared to control branches. The effect is statistically significant (p = 0.0000). But since only 1 Test vs. 1 Control district is in play, add more clusters for rock-solid inference.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sguo.MARINERFINANCE\\AppData\\Local\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:1894: ValueWarning: covariance of constraints does not have full rank. The number of constraints is 3, but rank is 2\n",
      "  warnings.warn('covariance of constraints does not have full '\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "\n",
    "# --- 2. Difference-in-Differences regression ---\n",
    "# Model: LPE ~ Group + Post + Group*Post\n",
    "# Cluster standard errors by district\n",
    "did_model = smf.ols(\"LPE ~ Group_num + Post + Group_num:Post\", data=df).fit(\n",
    "    cov_type=\"cluster\",\n",
    "    cov_kwds={\"groups\": df[\"branch_district\"]}  # cluster at district level\n",
    ")\n",
    "\n",
    "print(\"\\n=== Branch×Day Difference-in-Differences ===\")\n",
    "print(did_model.summary())\n",
    "\n",
    "# --- 3. Extract key effect ---\n",
    "salesforce_effect = did_model.params[\"Group_num:Post\"]\n",
    "salesforce_p = did_model.pvalues[\"Group_num:Post\"]\n",
    "\n",
    "print(\"\\nEstimated Salesforce Effect (Group_num×Post):\", round(salesforce_effect, 4))\n",
    "print(\"p-value:\", round(salesforce_p, 4))\n",
    "\n",
    "# Dynamic takeaway message\n",
    "direction = \"increased\" if salesforce_effect > 0 else \"decreased\"\n",
    "signif = \"statistically significant\" if salesforce_p < 0.05 else \"not statistically significant\"\n",
    "\n",
    "print(\"------Takeaways:\")\n",
    "print(\n",
    "    f\"After controlling for baseline differences and overall post-go-live trends, \"\n",
    "    f\"Salesforce rollout {direction} loans per employee (LPE) by ~{salesforce_effect:.3f} \"\n",
    "    f\"per branch-day in the Test group relative to Control.\"\n",
    ")\n",
    "print(\n",
    "    f\"Salesforce branches are averaging ~{salesforce_effect:.3f} more loans per employee \"\n",
    "    f\"per day after rollout compared to control branches. \"\n",
    "    f\"The effect is {signif} (p = {salesforce_p:.4f}). \"\n",
    "    f\"{'But since only 1 Test vs. 1 Control district is in play, add more clusters for rock-solid inference.'}\"\n",
    ")\n",
    "\n",
    "\n",
    "# print(\"\\nEstimated Salesforce Effect (Group_num×Post):\", round(salesforce_effect, 4))\n",
    "# print(\"p-value:\", round(salesforce_p, 4))\n",
    "# print(\"------Takeaways: After controlling for baseline differences and overall post-go-live trends, Salesforce rollout increased loans per employee (LPE) by ~0.046 per branch-day in the Test group relative to Control.Salesforce branches are averaging ~0.046 more loans per employee per day after rollout compared to control branches. The effect is large enough that we can be confident it’s not just noise — but since only 1 Test vs. 1 Control district is in play, add more clusters for rock-solid inference.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 956,
   "id": "3dfb3607-2bd0-4ab4-9c6e-809b83bd1a72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:               LPE_post   R-squared:                       0.092\n",
      "Model:                            OLS   Adj. R-squared:                 -0.135\n",
      "Method:                 Least Squares   F-statistic:                    0.4037\n",
      "Date:                Mon, 22 Sep 2025   Prob (F-statistic):              0.681\n",
      "Time:                        18:01:07   Log-Likelihood:                -2.5233\n",
      "No. Observations:                  11   AIC:                             11.05\n",
      "Df Residuals:                       8   BIC:                             12.24\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      1.1713      0.489      2.398      0.043       0.045       2.298\n",
      "Group_num      0.0523      0.249      0.210      0.839      -0.522       0.627\n",
      "LPE_pre       -0.4218      0.646     -0.653      0.532      -1.911       1.067\n",
      "==============================================================================\n",
      "Omnibus:                        0.108   Durbin-Watson:                   2.779\n",
      "Prob(Omnibus):                  0.948   Jarque-Bera (JB):                0.328\n",
      "Skew:                          -0.015   Prob(JB):                        0.849\n",
      "Kurtosis:                       2.155   Cond. No.                         9.67\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "\n",
      "Estimated Salesforce Effect (Group): 0.0523 p = 0.8391\n",
      "\n",
      "The branch-level ANCOVA model shows Test branches averaged  0.0523 ,  higher LPE than Control after rollout, adjusting for pre-LPE. But with only 11 branches, this is not statistically significant. The DiD panel model is more informative here because it uses many more data points.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sguo.MARINERFINANCE\\AppData\\Local\\anaconda3\\Lib\\site-packages\\scipy\\stats\\_axis_nan_policy.py:418: UserWarning: `kurtosistest` p-value may be inaccurate with fewer than 20 observations; only n=11 observations were given.\n",
      "  return hypotest_fun_in(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "# Build branch-level pre and post averages\n",
    "pre = (df[df[\"Post\"]==0]\n",
    "       .groupby([\"Branch\",\"Group_num\"], as_index=False)[\"LPE\"].mean()\n",
    "       .rename(columns={\"LPE\":\"LPE_pre\"}))\n",
    "\n",
    "post = (df[df[\"Post\"]==1]\n",
    "        .groupby([\"Branch\",\"Group_num\"], as_index=False)[\"LPE\"].mean()\n",
    "        .rename(columns={\"LPE\":\"LPE_post\"}))\n",
    "\n",
    "branch_avg = pd.merge(pre, post, on=[\"Branch\",\"Group_num\"], how=\"inner\")\n",
    "\n",
    "# ANCOVA regression\n",
    "ancova = smf.ols(\"LPE_post ~ Group_num + LPE_pre\", data=branch_avg).fit()\n",
    "print(ancova.summary())\n",
    "\n",
    "print(\"\\nEstimated Salesforce Effect (Group):\",\n",
    "      round(ancova.params[\"Group_num\"], 4),\n",
    "      \"p =\", round(ancova.pvalues[\"Group_num\"], 4))\n",
    "print(\"\\nThe branch-level ANCOVA model shows Test branches averaged \", round(ancova.params[\"Group_num\"], 4) ,\",  higher LPE than Control after rollout, adjusting for pre-LPE. But with only 11 branches, this is not statistically significant. The DiD panel model is more informative here because it uses many more data points.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 957,
   "id": "74635098-7ebf-4cf0-a94a-46dd821e1631",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PrePost    Group      Post       Pre     Delta  Pct_Change\n",
      "0        Control  0.866667  0.722222  0.144444   20.000000\n",
      "1           Test  1.000000  0.530000  0.470000   88.679245\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "\n",
    "def lpe_summary_table(csv_path: str, out_csv: str = \"lpe_summary_pre_post.csv\") -> pd.DataFrame:\n",
    "    \"\"\"\n",
    "    Build the LPE summary table:\n",
    "      Group | Pre | Post | Delta | Pct_Change\n",
    "    using columns: Group, PrePost, branch_day_LPE, CalendarDate (dates ok as strings)\n",
    "\n",
    "    Args:\n",
    "        csv_path: path to the Salesforce monitoring CSV.\n",
    "        out_csv:  where to save the summary table CSV.\n",
    "\n",
    "    Returns:\n",
    "        pandas.DataFrame with the summary.\n",
    "    \"\"\"\n",
    "    df = pd.read_csv(csv_path)\n",
    "\n",
    "    # Basic checks\n",
    "    req = {\"Group\", \"PrePost\", \"branch_day_LPE\"}\n",
    "    missing = req - set(df.columns)\n",
    "    if missing:\n",
    "        raise ValueError(f\"Missing columns in CSV: {sorted(missing)}\")\n",
    "\n",
    "    # Compute means by Group & PrePost\n",
    "    summary = (\n",
    "        df.groupby([\"Group\", \"PrePost\"], as_index=False)[\"branch_day_LPE\"]\n",
    "          .mean()\n",
    "          .pivot(index=\"Group\", columns=\"PrePost\", values=\"branch_day_LPE\")\n",
    "          .reset_index()\n",
    "    )\n",
    "\n",
    "    # Delta & % change\n",
    "    summary[\"Delta\"] = (summary[\"Post\"] - summary[\"Pre\"]).astype(float)\n",
    "    summary[\"Pct_Change\"] = (summary[\"Delta\"] / summary[\"Pre\"] * 100).astype(float)\n",
    "\n",
    "    # Optional: consistent rounding for leadership view\n",
    "    summary = summary[[\"Group\", \"Post\", \"Pre\", \"Delta\", \"Pct_Change\"]]\n",
    "    summary[\"Post\"] = summary[\"Post\"].round(6)       # keep precision if needed\n",
    "    summary[\"Pre\"] = summary[\"Pre\"].round(6)\n",
    "    summary[\"Delta\"] = summary[\"Delta\"].round(6)\n",
    "    summary[\"Pct_Change\"] = summary[\"Pct_Change\"].round(6)\n",
    "\n",
    "    # Save to CSV\n",
    "    Path(out_csv).parent.mkdir(parents=True, exist_ok=True)\n",
    "    summary.to_csv(out_csv, index=False)\n",
    "\n",
    "    return summary\n",
    "\n",
    "# --- Example usage ---\n",
    "if __name__ == \"__main__\":\n",
    "    table = lpe_summary_table(\"df_branch_day.csv\", out_csv=\"lpe_summary_pre_post.csv\")\n",
    "    print(table)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 958,
   "id": "3cbda7a6-e355-4109-8b96-7e23266cb172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Branch</th>\n",
       "      <th>Group_num</th>\n",
       "      <th>LPE_pre</th>\n",
       "      <th>LPE_post</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4005</td>\n",
       "      <td>0</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4006</td>\n",
       "      <td>0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4012</td>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4015</td>\n",
       "      <td>0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7402</td>\n",
       "      <td>1</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>7427</td>\n",
       "      <td>1</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7430</td>\n",
       "      <td>1</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7434</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650000</td>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7443</td>\n",
       "      <td>1</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>7856</td>\n",
       "      <td>0</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7866</td>\n",
       "      <td>0</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Branch  Group_num   LPE_pre  LPE_post\n",
       "0     4005          0  0.800000       0.8\n",
       "1     4006          0  0.666667       1.4\n",
       "2     4012          0  1.000000       0.3\n",
       "3     4015          0  0.500000       1.1\n",
       "4     7402          1  0.300000       0.6\n",
       "5     7427          1  0.550000       1.0\n",
       "6     7430          1  0.600000       0.8\n",
       "7     7434          1  0.650000       1.2\n",
       "8     7443          1  0.550000       1.4\n",
       "9     7856          0  0.466667       0.8\n",
       "10    7866          0  0.900000       0.8"
      ]
     },
     "execution_count": 958,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "branch_avg.head(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8122f50b-384c-4859-9e93-af5285b5ef5e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 959,
   "id": "5b8ae446-cc05-4634-b520-14b4d7b3af68",
   "metadata": {},
   "outputs": [],
   "source": [
    "# eff = float(ancova.params.get(\"Group_num\", np.nan))\n",
    "# p = float(ancova.pvalues.get(\"Group_num\", np.nan))\n",
    "# print(eff,p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 960,
   "id": "6b692a40-1c29-4da3-85a3-810be0798f6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "# print(\"Earliest CalendarDate:\", df[\"CalendarDate\"].min())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 961,
   "id": "78ba79ab-aa51-4b80-ac4e-28b9e8027ce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import pandas as pd\n",
    "# import matplotlib.pyplot as plt\n",
    "\n",
    "# # Reload file after reset\n",
    "# # file_path = \"/mnt/data/06b77b8e-b4ae-4510-b9cd-8e3228895dc7\"\n",
    "# # df = pd.read_csv(file_path)\n",
    "\n",
    "# # Ensure CalendarDate is datetime\n",
    "# # df[\"CalendarDate\"] = pd.to_datetime(df[\"CalendarDate\"])\n",
    "\n",
    "# # Compute branch-day LPE if not already computed\n",
    "# # emp_col = \"total_employee_size\" if \"total_employee_size\" in df.columns else (\"#emps\" if \"#emps\" in df.columns else None)\n",
    "# # if emp_col is None:\n",
    "# #     raise ValueError(\"Need total_employee_size or #emps column to compute LPE.\")\n",
    "# # df[\"_emp_den\"] = pd.to_numeric(df[emp_col], errors=\"coerce\").clip(lower=1)\n",
    "# # df[\"LPE\"] = df[\"new_loans\"] / df[\"_emp_den\"]\n",
    "\n",
    "# # Aggregate daily LPE trend for Test vs Control\n",
    "# daily_trend = df.copy()\n",
    "# # (\n",
    "# #     df.groupby([\"CalendarDate\", \"Group\"])[\"LPE\"]\n",
    "# #       .mean()\n",
    "# #       .reset_index()\n",
    "# # )\n",
    "\n",
    "# # Plot\n",
    "# plt.figure(figsize=(12,6))\n",
    "# for group, data in daily_trend.groupby(\"Group\"):\n",
    "#     plt.plot(data[\"CalendarDate\"], data[\"LPE\"], marker=\"o\", label=group)\n",
    "\n",
    "# plt.title(\"Daily Average Loans per Employee (LPE): Test vs Control\")\n",
    "# plt.xlabel(\"Date\")\n",
    "# plt.ylabel(\"Average LPE\")\n",
    "# plt.legend(title=\"Group\")\n",
    "# plt.grid(True)\n",
    "# plt.tight_layout()\n",
    "\n",
    "# plt_path = \"LPE_trend_plot.pdf\"\n",
    "# plt.savefig(plt_path)\n",
    "# plt.close()\n",
    "\n",
    "# plt_path\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1907c16a-917f-432d-bafb-24a79a196804",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 962,
   "id": "47b75ab2-3e09-4426-91ab-6ad6f86e56ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install nbconvert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 963,
   "id": "f7eee21c-40b2-421d-8517-5eac97025d22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Detected notebook: C:\\Users\\sguo.MARINERFINANCE\\Salesforce AB testing - Check random - monitoring - branch level comparison Clustered Randomized Control\n",
      "Saved outputs-only HTML → Salesforce_monitoring_notebook_output20250922.html\n"
     ]
    }
   ],
   "source": [
    "# Export *this* notebook to HTML (no code cells), from inside the notebook.\n",
    "\n",
    "import os, sys, json\n",
    "import nbformat\n",
    "\n",
    "# --- Try to locate the current notebook path ---\n",
    "def _nb_path_via_ipynbname():\n",
    "    try:\n",
    "        import ipynbname  # pip install ipynbname\n",
    "    except Exception:\n",
    "        # Try to install ipynbname if missing\n",
    "        try:\n",
    "            import subprocess, sys as _sys\n",
    "            subprocess.check_call([_sys.executable, \"-m\", \"pip\", \"install\", \"-q\", \"ipynbname\"])\n",
    "            import ipynbname\n",
    "        except Exception:\n",
    "            return None\n",
    "    try:\n",
    "        return str(ipynbname.path())\n",
    "    except Exception:\n",
    "        return None\n",
    "\n",
    "def _nb_path_via_server():\n",
    "    # Fallback that queries the local Jupyter server for the session’s notebook path\n",
    "    try:\n",
    "        import ipykernel\n",
    "        from notebook import notebookapp\n",
    "        import requests\n",
    "        connection_file = ipykernel.get_connection_file()\n",
    "        kernel_id = os.path.basename(connection_file).split(\"-\", 1)[1].split(\".\")[0]\n",
    "        for srv in notebookapp.list_running_servers():\n",
    "            try:\n",
    "                # Auth token if present\n",
    "                token = srv.get(\"token\", \"\")\n",
    "                url = srv[\"url\"] + \"api/sessions\"\n",
    "                headers = {}\n",
    "                params = {\"token\": token} if token else {}\n",
    "                r = requests.get(url, headers=headers, params=params, timeout=3)\n",
    "                for s in r.json():\n",
    "                    if s.get(\"kernel\", {}).get(\"id\") == kernel_id:\n",
    "                        return os.path.join(s[\"notebook\"][\"path\"]) if srv.get(\"notebook_dir\") is None else \\\n",
    "                               os.path.join(srv[\"notebook_dir\"], s[\"notebook\"][\"path\"])\n",
    "            except Exception:\n",
    "                continue\n",
    "    except Exception:\n",
    "        pass\n",
    "    return None\n",
    "\n",
    "def get_current_notebook_path():\n",
    "    return _nb_path_via_ipynbname() or _nb_path_via_server()\n",
    "\n",
    "# --- Export function: outputs-only (no code) ---\n",
    "def export_this_notebook_to_html(outputs_html=\"outputs_only.html\", execute=False):\n",
    "    \"\"\"\n",
    "    Exports the currently running notebook to HTML with no code cells (outputs + markdown only).\n",
    "    Set execute=True to re-run the notebook before exporting.\n",
    "    \"\"\"\n",
    "    nb_path = get_current_notebook_path()\n",
    "    if not nb_path or not os.path.exists(nb_path):\n",
    "        raise RuntimeError(\n",
    "            \"Couldn't detect the current notebook path automatically. \"\n",
    "            \"Please specify a path manually or run this from a standard Jupyter environment.\"\n",
    "        )\n",
    "\n",
    "    print(f\"Detected notebook: {nb_path}\")\n",
    "\n",
    "    # Load notebook\n",
    "    nb = nbformat.read(nb_path, as_version=4)\n",
    "\n",
    "    # Optionally execute before exporting (fresh outputs)\n",
    "    if execute:\n",
    "        from nbconvert.preprocessors import ExecutePreprocessor\n",
    "        ep = ExecutePreprocessor(timeout=900, kernel_name=\"python3\")\n",
    "        ep.preprocess(nb, {\"metadata\": {\"path\": os.path.dirname(nb_path) or \".\"}})\n",
    "\n",
    "    # Export to HTML, excluding code and input prompts\n",
    "    from nbconvert import HTMLExporter\n",
    "    exporter = HTMLExporter()\n",
    "    exporter.exclude_input = True\n",
    "    exporter.exclude_input_prompt = True\n",
    "\n",
    "    body, _ = exporter.from_notebook_node(nb)\n",
    "    with open(outputs_html, \"w\", encoding=\"utf-8\") as f:\n",
    "        f.write(body)\n",
    "\n",
    "    print(f\"Saved outputs-only HTML → {outputs_html}\")\n",
    "\n",
    "from datetime import date\n",
    "\n",
    "today = date.today().strftime(\"%Y%m%d\")  # e.g. 20250922\n",
    "# ---- Run it (set execute=True if you want to re-run the notebook first) ----\n",
    "export_this_notebook_to_html(outputs_html=\"Salesforce_monitoring_notebook_output\"+today+\".html\", execute=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 964,
   "id": "8035a001-47d1-4da5-bf51-69126bd8aedd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %run \"Salesforce AB testing - Check random - monitoring - simple-daily view.ipynb\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ea36c5a-ac7b-445e-8177-e10e2457ab95",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
